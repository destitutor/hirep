# 리포지토리 페이지에 나타날 이름이다.
name: Gradle & Spring Boot CI/CD

# 이벤트 트리거. 워크플로우가 언제 실행될지를 결정한다.
on:
  push:
    branches:
      - main

# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름을 차례대로 채워넣는다.
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: hireo-springboot-build
  CODE_DEPLOY_APPLICATION_NAME: hireo-springboot-webservice
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: hireo-springboot-webservice-group
  RESOURCE_PATH: ./src/test/resources

jobs:
  build-and-deploy:
    # 깃헙에서 호스팅하는 가상 서버 환경을 정의한다.
    runs-on: ubuntu-latest
    # job에서 실행되어야 할 명령들을 정의한다.
    steps:
      - uses: actions/checkout@v3
      
      # 실행 권한을 부여하여 권한 때문에 gradlew를 실행할 수 없는 문제를 해결한다.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # JDK 11로 셋업한다.
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin

      - name: Set up yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}/application.yml
        env:
          security.jwt.base64-secret: ${{ secrets.JWT_SECRET }}
          security.jwt.expiration-time: ${{ secrets.JWT_EXPIRATION_TIME }}

      # .gradle 디렉터리 전체를 캐시하는 대신 이 build-action은
      # 캐싱이 필요한 특정 하위 디렉터리만 선택한다. 캐싱은 기본적으로 활성화되어 있다.
      # 이 작업은 이후의 gradle을 실행하는 단계들에 모두 적용된다.
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build

      # AWS 인증을 거친다.
      # IAM 사용자 액세스 키와 비밀 키를 활용한다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 빌드 결과물을 S3 버킷에 업로드한다.
      # s3-location에 압축 파일을 업로드 할 S3 버킷 정보를 명시한다.
      # 그리고 숨겨진 파일은 필요가 없으므로 번들링하지 않는다.
      # 여기서 $GITHUB_SHA는 깃허브 자체에서 커밋마다 생성하는 랜덤한 변수값이다. 이름 충돌을 막기 위해서 사용한다.
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # S3 버킷에 있는 파일을 대상으로 CodeDeploy를 실행한다.
      # deployment-config-name은 배포 방식인데 기본값을 사용한다.
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip